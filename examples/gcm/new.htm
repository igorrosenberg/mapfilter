<!DOCTYPE html>
<html>
  <head>
    <title>Google Maps JavaScript API v3 Example: Asynchronous Map Simple</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <script type="text/javascript" src="js/util.js"></script>
    <script type="text/javascript" src="js/json2.js"></script>
    <style >
html, body {
  height: 100%;
  margin: 0;
  padding: 0;
}

#button {
    width: 350px;
    float: right;
}

#map_canvas {
  height: 100%;
	width:100%;
  border: 1px solid blue;
  margin: 40px 40px;
  padding: 15px 15px;
  background-color: yellow;
}

#wrap_map_canvas {
  height: 260px;
	width: 360px;
}

@media print {
  html, body {
    height: auto;
  }

  #map_canvas {
    height: 650px;
  }
}
</style>
    <script>


function ajaxLoad()
{
var xmlhttp=new XMLHttpRequest();
xmlhttp.onreadystatechange=function() {
  if (xmlhttp.readyState==4 && xmlhttp.status==200)  {
	 var text = xmlhttp.responseText[0,80] + '[... of '+  xmlhttp.responseText.size() + ']';
    console.log ('Response received: ' +  text );
    }
  }
xmlhttp.open("GET","ajax_info.txt",true);
xmlhttp.send();
}

	function loadCalendars() {
        var newData = [
        {title:'ONE', lat:48.00, lng:-1.50, info: 'xxx1'},
        {title:'TWO', lat:48.15, lng:-1.66, info: 'xxx2'},
        {title:'THREE', lat:48.30, lng:-1.80, info: 'xxx3'}
        ];
		// console.log ('events before load: ' + event_markers.values().length );
		for (var i = 0 ; i < newData.length ; i++) {
			var x = newData[i];
			// console.log ('event loaded: ' + x );
	        event_markers.add (x);
			}
		// console.log ('events after load: ' + event_markers.values().length );

		var gCalURL = 'https://www.google.com/calendar/feeds/aikidorennes@gmail.com/public/basic';
		var startDay= '2012-07-01T00:00:00-00:00';
		var endDay = '2013-06-31T00:00:00-00:00';
		getGCalData(gCalURL, startDay, endDay, { 
			onCalendarLoad: calendarLoad,
			onGeoDecodeAddr: geoDecodeAddr,
			onGeoDecodeComplete: geoDecodeComplete,
			onError: gcalError
			});
		}

		function calendarLoad (){ console.log ('calendarLoad') } ; 
		function geoDecodeAddr (){ console.log ('geoDecodeAddr') } ; 
		function geoDecodeComplete (){ console.log ('geoDecodeComplete') } ; 
		function gcalError (){ console.log ('gcalError') } ; 
		function calendarCallback (){ console.log ('calendarCallback') } ; 

		function treatCalendarEvents(calendarAnswer) {
			 var title = calendarAnswer.feed.title['$t']	
			 var calendarHref = calendarAnswer.feed.link[0].href
			 

		if (calendarAnswer.feed.entry)
		for (var ii=0; calendarAnswer.feed.entry[ii]; ii++) {
			 console.log ('Treating entry ' + ii);
			var curEntry = calendarAnswer.feed.entry[ii];
			if (!(curEntry['gd$when'] && curEntry['gd$when'][0]['startTime'])) {
				console.log(" skipping cal curEntry (no gd$when) %s (%o)", curEntry['title']['$t'], curEntry);
				continue;
			};
			var url = {};
			for (var jj=0; curEntry.link[jj]; jj++) {
			 console.log ('Treating entry link ' + jj);
				var curLink = curEntry.link[jj];
				if (curLink.type == 'text/html') {
					// looks like when rel='related', href is original event info (like meetup.com)
					// when rel='alternate', href is the google.com calendar event info
					url[curLink.rel] = curLink.href;
				}
			}
			 console.log ('				name: ' + curEntry['title']['$t']);
			 console.log ('				desc: ' + curEntry['content']['$t']);
			 console.log ('				addrOrig: ' + curEntry['gd$where'][0]['valueString'] || '');
			 console.log ('				url: ' + url.related || url.alternate);
			 console.log ('				dateStart: ' + curEntry['gd$when'][0]['startTime']);
			 console.log ('				dateEnd: ' + curEntry['gd$when'][0]['endTime']);

			var kk = {
				calTitle: title,
				name: curEntry['title']['$t'],
				desc: curEntry['content']['$t'],
				addrOrig: curEntry['gd$where'][0]['valueString'] || '',  // 'location' field of the event
				url: url.related || url.alternate, // TODO - is this what we want? see href above
				dateStart: curEntry['gd$when'][0]['startTime'],
				dateEnd: curEntry['gd$when'][0]['endTime']
			};
			console.log ('created kk ' + kk.name);
			if (kk.addrToGoogle) {
				console.log("Maybe a new address, get ready to geodecode "+kk.name+" ["+kk.addrOrig+"]");
			} else {
				console.log(" Skipping blank address for "+kk.name+" ["+kk.addrOrig+"]",kk);
			}
			console.log("parsed curEntry "+ii+": ", kk.name);
			console.log("TODO variable kk is lost, push it somewhere!");
		}
}

function getGCalData(gCalUrl, startDays, endDays, callbacks ) {
		console.log ('loading: ' + gCalUrl);
		if (gCalUrl.search(/^http/i) < 0) {
			console.log("bad url: "+ gCalUrl);
			return;
			}
		gCalUrl = gCalUrl.replace(/\/basic$/, '/full');

		// http://code.google.com/apis/calendar/docs/2.0/reference.html
		gCalObj = {
			'start-min': startDays,
			'start-max': endDays,
			'max-results': 200,
			'orderby'  : 'starttime',
			'sortorder': 'ascending',
			'singleevents': false
			};

		var array = [];
		for (var key in gCalObj) {
    		array.push( key + '=' + gCalObj[key] ) ;
		}		
		var mapString = array.join("&");
		var ajaxURL = gCalUrl + "?alt=json&" + mapString;
		var xmlhttp=new XMLHttpRequest();
		xmlhttp.onreadystatechange = function () {
		 console.log ('Response received now: state=' + xmlhttp.readyState + ' status=' + xmlhttp.status);
		  if (xmlhttp.readyState==4 && xmlhttp.status==200)  {
			 var text = xmlhttp.responseText.substring(0,80) + ' [... of '+  xmlhttp.responseText.length + ']';
			 console.log ('Response received: ' +  text );
			 var calendarAnswer = JSON.parse(xmlhttp.responseText);
			 treatCalendarEvents(calendarAnswer);
			 }
		  };

		xmlhttp.open("GET",ajaxURL,true);
		xmlhttp.send();
	}
	
	function createMarker(marker){
		// new Gmarker object
		var gMarker = new google.maps.Marker({
			position: new google.maps.LatLng(marker.lat, marker.lng),
			title: marker.desc,
			map: map,
			zIndex: 2,
			//  icon: image,
			});
 
			// add Listener that pops an infoWindow 
			google.maps.event.addListener(gMarker, 'click', function() {
				var infowindow = new google.maps.InfoWindow({content: marker.info});
				infowindow.open(map, gMarker);
			});
			return gMarker;
	}  // end createMarker
	  
	function addMarkersToMap() {
		var values = event_markers.values();
		for (var i = 0; i < values.length; i++) {
			// remember marker so hiding is posible
			values[i].gMarker = createMarker(values[i]);
			} // end for markers
	} // end addMarkersToMap

	function hideMarkersFromMap() {
		var values = event_markers.values();
		for (var i = 0; i < values.length; i++) {
			var marker = values[i];
			console.log ('hiding marker ' + marker.title + ' at ' + marker.lat) ;
			marker.gMarker.setMap(null) ;
		} // end for markers
	} // end addMarkersToMap

	function createMap() {

		// only create map if it doesn't exist
		if (!map) {
			var mapOptions = {
				zoom: 8,
				center: new google.maps.LatLng(48.114767,-1.68251), // Rennes
				mapTypeId: google.maps.MapTypeId.ROADMAP
           };
           map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
        }

      } // end createMap

	function initialize() {
		// document.getElementById('map_canvas').style.display = 'block' ;
		// document.getElementById('button').style.display = 'none' ;
		loadCalendars();
		console.log ('UNCOMMENT');
		// createMap();
		// addMarkersToMap();
	} // end initialize

	// the google map object
	var map;

	// list calendars currently active. 
	var calendarList = [];

	// list of the events with information. 
	var event_markers = new Set();

	/*
	 * Add google maps script if not there yet = async load gmaps
	 */ 
	function loadScript() {
 
		// calendarList = calendarList1;

		var g_id = 'google_maps';
		if ( ! document.getElementById(g_id) ) {
			var script = document.createElement('script');
			script.id = g_id;
			script.type = 'text/javascript';
			script.src = 'https://maps.googleapis.com/maps/api/js?v=3.10&sensor=false&callback=initialize';
			document.body.appendChild(script);
		} else {
			initialize();
		}            

	} // end loadScript

    </script>
  </head>
  <body>
    <div id="button">
		<a href='#' onclick="loadScript()">load map</a><br/>
		<a href='#' onclick="hideMarkersFromMap()">hideMarkersFromMap</a><br/><br/>
		<br/>
		<a href='http://jsfiddle.net/B3a86/2/'>Example many points</a><br/>
		<a href='https://developers.google.com/maps/documentation/javascript/reference#Map'>Google Maps API reference</a><br/>
	</div>
	<div id="wrap_map_canvas">
		<div id="map_canvas"></div>
	</div>
  </body>
</html>
